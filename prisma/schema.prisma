generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// üè∑ TABLA 1: CATEGOR√çAS
model Category {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  description String?
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // Relaciones
  products    Product[]
  
  @@map("categories")
}

// üì¶ TABLA 2: PRODUCTOS
model Product {
  id          Int       @id @default(autoincrement())
  name        String
  sku         String    @unique
  description String?
  price       Decimal   @db.Decimal(10, 2)
  stock       Int       @default(0)
  minStock    Int       @default(0)
  isActive    Boolean   @default(true)
  categoryId  Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // Relaciones
  category           Category             @relation(fields: [categoryId], references: [id])
  transactionDetails TransactionDetail[]
  
  @@map("products")
}

// üìã TABLA 3: TRANSACCIONES (CABECERA)
model Transaction {
  id              Int       @id @default(autoincrement())
  transactionType String    // 'IN' (entrada) o 'OUT' (salida)
  reference       String?   // N√∫mero de factura, orden, etc.
  description     String?
  totalItems      Int       @default(0)
  totalAmount     Decimal   @default(0) @db.Decimal(10, 2)
  status          String    @default("PENDING") // PENDING, COMPLETED, CANCELLED
  createdBy       String?   // Usuario que cre√≥ la transacci√≥n
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  // Relaciones
  details TransactionDetail[]
  
  @@map("transactions")
}

// üìù TABLA 4: DETALLES DE TRANSACCIONES
model TransactionDetail {
  id            Int       @id @default(autoincrement())
  transactionId Int
  productId     Int
  quantity      Int
  unitPrice     Decimal   @db.Decimal(10, 2)
  subtotal      Decimal   @db.Decimal(10, 2)
  createdAt     DateTime  @default(now())
  
  // Relaciones
  transaction Transaction @relation(fields: [transactionId], references: [id], onDelete: Cascade)
  product     Product     @relation(fields: [productId], references: [id])
  
  @@map("transaction_details")
}

// üë§ TABLA DE USUARIOS (si no existe)
model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  name      String
  password  String
  role      String   @default("USER") // USER, ADMIN
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("users")
}